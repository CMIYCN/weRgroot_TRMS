--DROP TABLE APPROVALS;
--DROP TABLE REIMBURSEMENT_FORM;
--DROP TABLE EMPLOYEE;
--DROP TABLE EVENT;
--DROP TABLE EVENT_TYPE_LOOKUP;
--DROP TABLE POSITION_LOOKUP;

--TRUNCATE TABLE POSITION_LOOKUP;
--INSERT INTO POSITION_LOOKUP VALUES(0, 'EMPLOYEE');
--INSERT INTO POSITION_LOOKUP VALUES(1, 'DIRECT SUPERVISOR');
--INSERT INTO POSITION_LOOKUP VALUES(2, 'DEPARTMENT HEAD');
--INSERT INTO POSITION_LOOKUP VALUES(3, 'BENEFITS COORDINATOR');
--INSERT INTO POSITION_LOOKUP VALUES(4, 'CEO');
--commit;

--EMPLOYEE TABLE
CREATE TABLE EMPLOYEE (
    EMP_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(100) UNIQUE,
    PASSWORD VARCHAR2(100),
    NAME VARCHAR2(100),
    POSITION_TYPE INTEGER,
    MANAGER_ID INTEGER
);

--POSITION TITLE LOOKUP TABLE
CREATE TABLE POSITION_LOOKUP (
    POSITION_TYPE INTEGER PRIMARY KEY,
    TITLE VARCHAR2(100)
);

--REIMBURSEMENT FORM TABLE
CREATE TABLE REIMBURSEMENT_FORM (
    FORM_ID INTEGER PRIMARY KEY,
    EVENT_ID INTEGER,
    EMP_ID INTEGER,
    TIMEOFEVENT VARCHAR2(100),
    DATEOFEVENT VARCHAR2(100),
    LOCATION VARCHAR2(100),
    DESCRIPTION VARCHAR2(200),
    COST FLOAT,
    PROJECTEDREIMBURSEMENT FLOAT,
    URGENT INTEGER
);

--APPROVALS TABLE
CREATE TABLE APPROVALS (
    FORM_ID INTEGER,
    SUPERVISOR INTEGER,
    DEPARTMENTHEAD INTEGER,
    BENCO INTEGER,
    CEO INTEGER
);

--EVENT TABLE
CREATE TABLE EVENT (
    EVENT_ID INTEGER PRIMARY KEY,
    EVENT_TYPE INTEGER,
    GRADE NUMBER,
    GRADING_FORMAT VARCHAR2(100)
);

--EVENT LOOKUP TABLE
CREATE TABLE EVENT_TYPE_LOOKUP (
    EVENT_TYPE INTEGER PRIMARY KEY,
    TITLE VARCHAR2(100)
);

ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_POSITION_TYPE
FOREIGN KEY (POSITION_TYPE) REFERENCES POSITION_LOOKUP(POSITION_TYPE);

ALTER TABLE REIMBURSEMENT_FORM
ADD CONSTRAINT FK_EVENT_ID
FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID);

ALTER TABLE REIMBURSEMENT_FORM
ADD CONSTRAINT FK_EMP_ID
FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID);

ALTER TABLE APPROVALS
ADD CONSTRAINT FK_FORM_ID
FOREIGN KEY (FORM_ID) REFERENCES REIMBURSEMENT_FORM(FORM_ID);

ALTER TABLE EVENT 
ADD CONSTRAINT FK_EVENT_TYPE
FOREIGN KEY (EVENT_TYPE) REFERENCES EVENT_TYPE_LOOKUP(EVENT_TYPE);

CREATE SEQUENCE EMPLOYEESEQ
MINVALUE 1000
INCREMENT BY 1
CACHE 5;

CREATE SEQUENCE REIMBURSEMENTSEQ
MINVALUE 1000
INCREMENT BY 1
CACHE 5;

CREATE SEQUENCE EVENTSEQ
MINVALUE 1000
INCREMENT BY 1
CACHE 5;
--prcedures
---INSERT A REIMBURSEMENT FORM ALSO PUTS THE FORM INTO APPROVALS
CREATE OR REPLACE PROCEDURE CREATE_REIMBURSEMENT_FORM(
NEW_EVENT_ID IN NUMBER,
NEW_EMP_ID IN NUMBER,
NEW_TIMEOFEVENT IN VARCHAR2,
NEW_DATEOFEVENT IN VARCHAR2,
NEW_LOCATION IN VARCHAR2,
NEW_DESCRIPTION IN VARCHAR2,
NEW_COST IN FLOAT,
NEW_PROJECTEDREIMBURSEMENT IN FLOAT,
NEW_URGENT IN NUMBER,
SUPERVISOR_APPROVAL IN NUMBER,
DEPARTMENT_APPROVAL IN NUMBER,
BENCO_APPROVAL IN NUMBER
)
AS
    FORM_ID_S NUMBER;
BEGIN
FORM_ID_S := REIMBURSEMENTSEQ.NEXTVAL;
INSERT INTO REIMBURSEMENT_FORM VALUES(FORM_ID_S,NEW_EVENT_ID,NEW_EMP_ID,NEW_TIMEOFEVENT,NEW_DATEOFEVENT,NEW_LOCATION,NEW_DESCRIPTION,NEW_COST,NEW_PROJECTEDREIMBURSEMENT,
NEW_URGENT);
INSERT INTO APPROVALS VALUES(FORM_ID_S,SUPERVISOR_APPROVAL,DEPARTMENT_APPROVAL,BENCO_APPROVAL,0);
END CREATE_REIMBURSEMENT_FORM;
/

--CREATE EMPLOYEE
CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE (
IN_USERNAME IN VARCHAR2, 
IN_PASSWORD IN VARCHAR2, 
IN_NAME IN VARCHAR2,
IN_POSITION_TYPE IN NUMBER,
IN_MANAGER_ID IN NUMBER
)
AS
BEGIN
INSERT INTO EMPLOYEE VALUES(EMPLOYEESEQ.NEXTVAL, IN_USERNAME, IN_PASSWORD, IN_NAME, IN_POSITION_TYPE, IN_MANAGER_ID);
END;
/
--UPDATE_EMPLOYEE,DELETE_EMPLOYEE,GET_PASSWORD
--updates employee
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(
OLD_USERNAME IN VARCHAR2,
NEW_USERNAME IN VARCHAR2,
NEW_PASSWORD IN VARCHAR2,
NEW_NAME IN VARCHAR2,
NEW_POSITION_TYPE IN NUMBER,
NEW_MANAGER_ID IN NUMBER
)
AS
BEGIN
UPDATE EMPLOYEE
SET-- EMP_ID = COALESCE(NEW_EMP_ID,EMP_ID),
USERNAME = COALESCE(NEW_USERNAME,USERNAME),
PASSWORD= COALESCE(NEW_PASSWORD,PASSWORD),
NAME = COALESCE(NEW_NAME,NAME),
POSITION_TYPE = COALESCE(NEW_POSITION_TYPE,POSITION_TYPE),
MANAGER_ID = COALESCE(NEW_MANAGER_ID,MANAGER_ID)
WHERE OLD_USERNAME=USERNAME;
END UPDATE_EMPLOYEE;
/
--deletes employee by username
CREATE OR REPLACE PROCEDURE DELETE_EMPLOYEE(
EMP_USERNAME IN VARCHAR2
)
AS
BEGIN
DELETE FROM EMPLOYEE WHERE EMPLOYEE.USERNAME = EMP_USERNAME;
END DELETE_EMPLOYEE;
/
--retrieves password
CREATE OR REPLACE PROCEDURE GET_PASSWORD(
USER_NAME IN VARCHAR2,
PASS OUT VARCHAR2
)
AS
BEGIN
SELECT PASSWORD INTO PASS FROM EMPLOYEE WHERE USER_NAME = EMPLOYEE.USERNAME;
END GET_PASSWORD;
/
CREATE OR REPLACE PROCEDURE GET_USERNAME_BY_PASSWORD(
USER_NAME IN VARCHAR2,
EMPID OUT NUMBER,
PASS OUT VARCHAR2,
NAME OUT VARCHAR2,
POSITIONTYPE OUT NUMBER,
MANAGERID OUT NUMBER
)
AS
BEGIN
SELECT EMP_ID INTO EMPID FROM EMPLOYEE WHERE USER_NAME = EMPLOYEE.USERNAME;
SELECT PASSWORD INTO PASS FROM EMPLOYEE WHERE USER_NAME = EMPLOYEE.USERNAME;
SELECT EMPLOYEE.NAME INTO NAME FROM EMPLOYEE WHERE USER_NAME = EMPLOYEE.USERNAME;
SELECT POSITION_TYPE INTO POSITIONTYPE FROM EMPLOYEE WHERE USER_NAME = EMPLOYEE.USERNAME;
SELECT MANAGER_ID INTO MANAGERID FROM EMPLOYEE WHERE USER_NAME = EMPLOYEE.USERNAME;
END GET_USERNAME_BY_PASSWORD;
/
----forms prcedures